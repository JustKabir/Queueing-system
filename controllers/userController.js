const Models = require('../database/models');
const { Op } = require("sequelize");
const {calculateTotalTime} = require('../utils/calculateTime')


// getToken
exports.generateToken_post = async(req, res)=>{
    try {
        // check if org exists
        const org = await Models.organization.findOne({where:{id:req.params.orgId}})
        if(!org) return res.status(404).json({success:false, message:"Invalid organization id"});

        //check if the token has already been generated by the user
        let user = await Models.User.findOne({
            where:{
                [Op.and]:[
                    {ip:req.ip},
                    {orgId:org.id},
                    {attended:false}
                ]
            }
        });
        if(user) {
            // if it exists then check if the generation of the token exceedds the closing time of the organization, if it has exceeded then update the users attended field to true and generate new token
                    //which i have not done here 
            return res.status(409).json({success:false, message:"You have already generated the token"});
        }
        // fetching last token No
        let lastTokenNo = await Models.User.findOne({
            where:{
                [Op.and]:[
                    {orgId:org.id},
                    {ip:req.ip},
                    {attended:false}
                ]
            },
            order:[['createdAt', 'DESC']]
        });
        if(!lastTokenNo) lastTokenNo = 0;
        // generating token
        await Models.User.create({
            orgId:req.params.orgId,
            ip: req.ip,
            tokenNo:lastTokenNo + 1
        });
        return res.status(200).json({success:true, message:""})

    } catch (error) {
        console.warn(error);
        return res.status(500).json({success: false, message:`Something went wrong, Please try again later`});
    }
}

exports.defaultPage_get = async(req,res)=>{
    try {
        //check if the orgId exists
        const org = await Models.organization.findOne({where:{id:req.params.orgId}});
        if(!org) return res.status(404).json({success:false, message:"invalid API request"})
        
        let defaultPageData = {}
        // Help desk no
        defaultPageData["helpDeskNo"] = org.helpDeskNo
        defaultPageData ["currentTokenNo"] = org.currentTokenNo;
                
        // Fetching user's Token
        let userToken = await Models.User.findOne({
            where:{
                [Op.and]:[
                    {ip:req.ip},
                    {orgId: org.id}
                ]
            }
        });
        if (!userToken) {
            defaultPageData["userToken"] = "Please click on Generate token to generate the token"
            defaultPageData["approxTime"] = "NA"
            defaultPageData["currentToken"] = "NA"
            return res.status(200).json({success: true, data:defaultPageData})
        }

        // approx time to be taken for your TokenNo to arrive
        const approxTimePerUser = `${org.approxTimeInHours}:${org.approxTimeInMinutes}`
        const approximateTime = calculateTotalTime(org.currentTokenNo, userToken,approxTimePerUser);
        defaultPageData['ApproxTime'] = approximateTime;
        defaultPageData['tokenNo'] = userToken.tokenNo        
        return res.status(200).json({success: true, data:defaultPageData})

    } catch (error) {
        console.error(error);
        return res.status(500).json({success:false, message:"Something went wrong, Please try again later"})
    }
}